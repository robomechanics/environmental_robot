<?xml version="1.0"?>
<launch>
    <arg name="useJoy" default="true"/>
    <arg name="useMicrostrain" default="true"/>
    <arg name="useHebi" default="true"/>
    <arg name="useLidar" default="true"/>
    <arg name="useManager" default="true"/>

    <!-- joy stick -->
    <node respawn="true" pkg="joy" type="joy_node" name="joy_input" if="$(arg useJoy)">
	    <param name="dev" type="string" value="/dev/input/js0"/>
	    <param name="autorepeat_rate" value="10"/>
    </node>

    <!-- lidar -->
    <include file="$(find ouster_ros)/launch/sensor.launch" if="$(arg useLidar)">
	    <arg name="sensor_hostname" value="10.10.1.111"/>
	    <arg name="lidar_mode" value="512x10"/>
	    <arg name="timestamp_mode" value="TIME_FROM_ROS_TIME"/>
	    <arg name="viz" value="false"/>
    </include>

    <!-- hebi nodes -->
    <rosparam file="$(find hebi_cpp_api_examples)/config/wheelie_params.yaml" command="load" />
    <node name="base_node" pkg="hebi_cpp_api_examples" type="wheelie_node" if="$(arg useHebi)" />
    <node name="mobile_io_teleop" pkg="gps_navigation" type="hebi_teleop.py" if="$(arg useHebi)" >
        <remap from="~cmd_vel" to="/cmd_vel"/>
    </node>

    <node name="tool_interface" pkg="gps_navigation" type="tool_arms_ctrl.py" if="$(arg useHebi)"/>
    <node name="pan_tilt_ctrl" pkg="gps_navigation" type="pan_tilt_ctrl.py" if="$(arg useHebi)"/>

    <!-- gps driver -->
    <include file="$(find microstrain_inertial_driver)/launch/microstrain.launch" if="$(arg useMicrostrain)">
        <arg name="params_file" value="$(find autonomy_manager)/config/hebi_microstrain.yaml"/>
    </include>

    <!-- throttle /nav/odom and /nav/heading for gui stability -->
    <node name="odom_throttler" pkg="topic_tools" type="throttle" args="messages /nav/odom 5.0"/>
    <node name="heading_throttler" pkg="topic_tools" type="throttle" args="messages /nav/heading 5.0"/>

    <!-- vanta pxrf -->
    <node name="pxrf_driver" pkg="pxrf" type="main" />
    <node name="pxrf_handle" pkg="pxrf" type="pxrf_handler.py" />

    <!--manager, scripted motion with speed control -->
    <node name="autonomy_teleop" pkg="autonomy_manager" type="autonomy_teleop.py" output="screen" if="$(arg useManager)"/>
    <node name="scripted_motion" pkg="rake_scan" type="scripted_sensor_prep.py" output="screen" if="$(arg useManager)"/>
	<rosparam command="load" file="$(find autonomy_manager)/config/constants.yaml" />
    <node name="manager" pkg="autonomy_manager" type="manager.py" output="screen" if="$(arg useManager)"/>
	    <!--<node name="calibration" pkg="autonomy_manager" type="calibration.py" output="screen" if="$(arg useManager)"/>-->
    
    <!--static transformation-->
    <node pkg="tf2_ros" type="static_transform_publisher" name="link1_broadcaster" args="0 0 0 0 0 0 1 base_footprint base_link" />
    <node pkg="tf2_ros" type="static_transform_publisher" name="link3_broadcaster" args="-0.17 -0.12 0.65 0 0 0 -1 base_link os_sensor" />
    
    <!--nav stack interface -->
    <node name="utm_odom2" pkg="robomech_nav" type="utm_to_odom_tf_broadcaster_average2.py" output="screen"/>
    <node name="NavigationInterfaceNode" pkg="robomech_nav" type="navigation_interface.py" output="screen"/>

    <!--param and arg -->
    <arg name="no_static_map" default="true"/>
    <arg name="base_global_planner" default="navfn/NavfnROS"/>
    <arg name="base_local_planner" default="dwa_local_planner/DWAPlannerROS"/>
    <param name="base_global_planner" value="asr_navfn/NavfnROS"/>
    <node pkg="move_base" type="move_base" respawn="false" name="move_base" output="screen">
    <!--remap from="/odom" to="/utm_odom2" /-->
    <remap from="/cmd_vel" to="/cmd_vel_auto" />
    <param name="base_global_planner" value="$(arg base_global_planner)"/>
    <param name="base_local_planner" value="$(arg base_local_planner)"/>  
    <rosparam file="$(find robomech_nav)/config/planner.yaml" command="load"/>

    <!-- observation sources located in costmap_common.yaml -->
    <rosparam file="$(find robomech_nav)/config/costmap_common.yaml" command="load" ns="global_costmap" />
    <rosparam file="$(find robomech_nav)/config/costmap_common.yaml" command="load" ns="local_costmap" />

    <!-- local costmap, needs size -->
    <rosparam file="$(find robomech_nav)/config/costmap_local.yaml" command="load" ns="local_costmap" />
    <param name="local_costmap/width" value="6.0"/>
    <param name="local_costmap/height" value="6.0"/>

    <!-- static global costmap, static map provides size -->
    <rosparam file="$(find robomech_nav)/config/costmap_global_static.yaml" command="load" ns="global_costmap" unless="$(arg no_static_map)"/>
    
    <!-- global costmap with laser, for odom_navigation_demo -->
    <rosparam file="$(find robomech_nav)/config/costmap_global_laser.yaml" command="load" ns="global_costmap" if="$(arg no_static_map)"/>
    <param name="global_costmap/width" value="100.0" if="$(arg no_static_map)"/>
    <param name="global_costmap/height" value="100.0" if="$(arg no_static_map)"/>
    <param name="global_costmap/origin_x" value="-50.0" if="$(arg no_static_map)"/>
    <param name="global_costmap/origin_y" value="-50.0" if="$(arg no_static_map)"/>
  </node>
</launch>
